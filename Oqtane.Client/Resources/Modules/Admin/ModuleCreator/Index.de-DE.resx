<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
            Microsoft ResX Schema 

            Version 2.0

            The primary goals of this format is to allow a simple XML format 
            that is mostly human readable. The generation and parsing of the 
            various data types are done through the TypeConverter classes 
            associated with the data types.

            Example:

            ... ado.net/XML headers & schema ...
            <resheader name="resmimetype">text/microsoft-resx</resheader>
            <resheader name="version">2.0</resheader>
            <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
            <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
            <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
            <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
            <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
                <value>[base64 mime encoded serialized .NET Framework object]</value>
            </data>
            <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
                <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
                <comment>This is a comment</comment>
            </data>

            There are any number of "resheader" rows that contain simple 
            name/value pairs.

            Each data row contains a name, and value. The row also contains a 
            type or mimetype. Type corresponds to a .NET class that support 
            text/value conversion through the TypeConverter architecture. 
            Classes that don't support this are serialized and stored with the 
            mimetype set.

            The mimetype is used for serialized objects, and tells the 
            ResXResourceReader how to depersist the object. This is currently not 
            extensible. For a given mimetype the value must be set accordingly:

            Note - application/x-microsoft.net.object.binary.base64 is the format 
            that the ResXResourceWriter will generate, however the reader can 
            read any of the formats listed below.

            mimetype: application/x-microsoft.net.object.binary.base64
            value   : The object must be serialized with 
                    : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
                    : and then encoded with base64 encoding.

            mimetype: application/x-microsoft.net.object.soap.base64
            value   : The object must be serialized with 
                    : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
                    : and then encoded with base64 encoding.

            mimetype: application/x-microsoft.net.object.bytearray.base64
            value   : The object must be serialized into a byte array 
                    : using a System.ComponentModel.TypeConverter
                    : and then encoded with base64 encoding.
            -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Template.Text" xml:space="preserve">
    <value>Vorlage:</value>
  </data>
  <data name="Select Template" xml:space="preserve">
    <value>Vorlage auswählen</value>
  </data>
  <data name="Local Version" xml:space="preserve">
    <value>Lokale Version</value>
  </data>
  <data name="Create Module" xml:space="preserve">
    <value>Modul erstellen</value>
  </data>
  <data name="Activate Module" xml:space="preserve">
    <value>Modul aktivieren</value>
  </data>
  <data name="Please Note That The Module Creator Is Only Intended To Be Used In A Development Environment" xml:space="preserve">
    <value>Bitte beachten Sie das die Modul-Erstellung nur für den Einsatz in einer Entwicklungsumgebung gedacht ist.</value>
  </data>
  <data name="Once You Have Compiled The Module And Restarted The Application You Can Activate The Module Below" xml:space="preserve">
    <value>Sobald Sie das Modul kompiliert und die Anwendung neugestartet haben können Sie das Modul aktivieren.</value>
  </data>
  <data name="The Source Code For Your Module Has Been Created At The Location Specified Below And Must Be Compiled In Order To Make It Functional. Once It Has Been Compiled You Must &lt;a href=\&quot;{0}\&quot;&gt;Restart&lt;/a&gt; Your Application To Apply These Changes." xml:space="preserve">
    <value>Der Quellcode für dieses Modul wurde am angegebenen Speicherort erstellt und muss erst kompiliert werden bevor dieses Funktioniert. Nachdem das Modul kompiliert wurde müssen Sie die Anwendung &lt;a href=\"{0}\"&gt;neustarten&lt;/a&gt; um die Änderungen zu übernehmen.</value>
  </data>
  <data name="You Must Provide A Valid Owner Name And Module Name ( ie. No Punctuation Or Spaces And The Values Cannot Be The Same ) And Choose A Template" xml:space="preserve">
    <value>Sie müssen einen gültigen Modul- sowie Organisationsnamen eingeben (d.h. Namen ohne Leer- oder Satzzeichen und die beiden Namen dürfen nicht identisch sein) sowie eine Vorlage auswählen.</value>
  </data>
  <data name="OwnerName.HelpText" xml:space="preserve">
    <value>Geben Sie den Organisationsnamen der Entwickler dieses Moduls ein. Dieser sollte weder Leer- noch Satzzeichen enthalten.</value>
  </data>
  <data name="ModuleName.HelpText" xml:space="preserve">
    <value>Geben Sie einen Namen für das Modul ein. Dieser sollte weder Leer- noch Satzzeichen enthalten.</value>
  </data>
  <data name="Description.HelpText" xml:space="preserve">
    <value>Erfassen Sie eine kurze Beschreibung für das Modul</value>
  </data>
  <data name="Template.HelpText" xml:space="preserve">
    <value>Wählen Sie eine Modulvorlage aus. Vorlagen befinden sich im Verzeichnis wwwroot/Modules/Templates auf Ihrem Server.</value>
  </data>
  <data name="FrameworkReference.HelpText" xml:space="preserve">
    <value>Wählen Sie eine Framework Referenzversion aus</value>
  </data>
  <data name="Location.HelpText" xml:space="preserve">
    <value>Speicherort an welchem das Modul erstellt wird</value>
  </data>
  <data name="OwnerName.Text" xml:space="preserve">
    <value>Organisation:</value>
  </data>
  <data name="ModuleName.Text" xml:space="preserve">
    <value>Modulname:</value>
  </data>
  <data name="Description.Text" xml:space="preserve">
    <value>Beschreibung:</value>
  </data>
  <data name="FrameworkReference.Text" xml:space="preserve">
    <value>Framework Referenz:</value>
  </data>
  <data name="Location.Text" xml:space="preserve">
    <value>Speicherort:</value>
  </data>
</root>